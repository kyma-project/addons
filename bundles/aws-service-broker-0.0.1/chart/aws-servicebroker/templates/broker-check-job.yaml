apiVersion: batch/v1
kind: Job
metadata:
    name: aws-service-broker-check-job
    labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    annotations:
        "helm.sh/hook": post-install,post-upgrade
        "helm.sh/hook-weight": "0"
        "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
    backoffLimit: 0
    template:
        metadata:
            annotations:
                 sidecar.istio.io/inject: "false"
        spec:
            serviceAccountName: {{ template "fullname" . }}
            restartPolicy: Never
            containers:
                - name: broker-checker
                  image: "{{ .Values.jobs.kubectlImage.repository }}:{{ .Values.jobs.kubectlImage.tag }}"
                  imagePullPolicy: {{ .Values.jobs.kubectlImage.pullPolicy }}
                  command: ["/bin/sh","-c"]
                  args:
                    - |
                      EXPECTED_SECRET_NAME={{ .Values.secretName }}
                      SECRET_NAME=$(kubectl get secret -n {{ .Release.Namespace }} {{ .Values.secretName }} -o jsonpath="{.metadata.name}")
                      if [[ "$SECRET_NAME" == "$EXPECTED_SECRET_NAME" ]] ;
                        then
                          echo "Success! Secret is present.";
                        else
                          echo "Failure! Secret '$EXPECTED_SECRET_NAME' is not present";
                          exit 1;
                      fi

                      success=false;
                      i=1;
                      limit=180;
                      while [ "$i" -le "$limit" ];
                      do
                          BROKER_TYPE=$(kubectl get servicebroker -n {{ .Release.Namespace }} {{ template "fullname" . }} -o jsonpath="{.status.conditions[0].type}")
                          BROKER_STATUS=$(kubectl get servicebroker -n {{ .Release.Namespace }} {{ template "fullname" . }} -o jsonpath="{.status.conditions[0].status}")
                          if [[ "$BROKER_TYPE" == "Ready" ]] && [[ "$BROKER_STATUS" == "True" ]];
                            then
                              echo "ServiesBroker is ready. Job is done.";
                              success=true;
                              break;
                            else
                              echo "Check $i/$limit - ServiceBroker is not ready, wait...";
                              sleep 5;
                          fi
                        i=$(( i + 1 ))
                      done;
                      if [ "$success" = false ] ;
                      then
                        echo "ServiesBroker is not ready. Timeout reached";
                        exit 1;
                      fi
